-- NOTES FROM GOING THROUGH HACKER RANK SQL CHALLENGES
-- https://www.hackerrank.com/domains/sql
--------------------------------------------Basic Challenges------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
---- Revising the Select Query I ----
-- Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
select * from city
where population > 100000
and countrycode = 'USA'
------------------------------------------------------------------------------------------------------------------------
---- Revising the Select Query II ----
-- Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
select name from city
where population > 120000
and countrycode = 'USA'
------------------------------------------------------------------------------------------------------------------------
---- Select All ----
-- Query all columns (attributes) for every row in the CITY table.
select * from city
------------------------------------------------------------------------------------------------------------------------
---- Select by ID ----
-- Query all columns for a city in CITY with the ID 1661.
select * from city
where id = '1661'
------------------------------------------------------------------------------------------------------------------------
---- Japanese Cities' Attributes ----
-- Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
select * from city
where countrycode = 'JPN'
------------------------------------------------------------------------------------------------------------------------
---- Japanese Cities' Names ----6
-- Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
select name from city
where countrycode = 'JPN'
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 1 ----
-- Query a list of CITY and STATE from the STATION table.
select city, state from station
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 3 ----
-- Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
select distinct city from station
where id % 2 = 0
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 4 ----
-- Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
select count(city) - count(distinct city) from station
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 5 ----
-- Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
-- Find max city length
select city, length(city) from station
where length(city) = (select max(length(city)) from station);

-- Find min city length
select city, length(city) from station
where length(city) = (select min(length(city)) from station)
order by city
limit 1;
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 6 ----
-- Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
select distinct city from station
where city like 'a%'
or city like 'e%'
or city like 'i%'
or city like 'o%'
or city like 'u%'

-- alternatively
-- select distinct city from station where left(city,1) in ('a','e','i','o','u');
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 7 ----
-- Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
select distinct city from station where right(city,1) in ('a','e','i','o','u');
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 8 ----
-- 	Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
select distinct city from station
where left(city,1) in ('a','e','i','o','u')
and right(city,1) in ('a','e','i','o','u')
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 9 ----
-- Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
select distinct city from station
where left(city,1) not in ('a','e','i','o','u')
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 10 ----
-- Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
select distinct city from station
where right(city,1) not in ('a','e','i','o','u')
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 11 ----
-- Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
select distinct city from station
where left(city,1) not in ('a','e','i','o','u')
or right(city,1) not in ('a','e','i','o','u')
------------------------------------------------------------------------------------------------------------------------
---- Weather Observation Station 1 ----
-- Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
select distinct city from station
where left(city,1) not in ('a','e','i','o','u')
and right(city,1) not in ('a','e','i','o','u')
------------------------------------------------------------------------------------------------------------------------
---- Higher Than 75 Marks ----
--Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
select name from students
where marks > 75
order by right(name, 3), id
------------------------------------------------------------------------------------------------------------------------
---- Employee Names ----
-- Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
select name from employee
order by name
------------------------------------------------------------------------------------------------------------------------
---- Employee Salaries ----
-- Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.
select name from employee
where salary > 2000
and months < 10
order by employee_id
--------------------------------------------Intermediate Challenges-----------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
---- Placements ----
-- You are given three tables: Students, Friends and Packages. Students contains two columns: ID and Name. Friends contains two columns: ID and Friend_ID (ID of the ONLY best friend). Packages contains two columns: ID and Salary (offered salary in $ thousands per month). Write a query to output the names of those students whose best friends got offered a higher salary than them. Names must be ordered by the salary amount offered to the best friends. It is guaranteed that no two students got same salary offer.
select name from students as s
join friends as f on f.id = s.id
join packages as p1 on s.id = p1.id
join packages as p2 on f.friend_id = p2.id
where p1.salary < p2.salary
order by p2.salary
------------------------------------------------------------------------------------------------------------------------
---- Symmetric Pairs ----
-- You are given a table, Functions, containing two columns: X and Y. Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1. Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 â‰¤ Y1.
with f1 as
(select row_number() over(order by X) as ID, X, Y from functions),

f2 as
(select row_number() over(order by X) as ID, X, Y from functions)

select distinct f1.x, f1.y from f1
join f2
where f1.x = f2.y and f1.y = f2.x   -- symmetry!
and f1.id <> f2.id   -- but not symmetric with itself
and f1.x <= f1.y
------------------------------------------------------------------------------------------------------------------------
----  ----

------------------------------------------------------------------------------------------------------------------------
----  ----

------------------------------------------------------------------------------------------------------------------------
----  ----

------------------------------------------------------------------------------------------------------------------------
----  ----

------------------------------------------------------------------------------------------------------------------------
----  ----

------------------------------------------------------------------------------------------------------------------------
----  ----

------------------------------------------------------------------------------------------------------------------------
----  ----

------------------------------------------------------------------------------------------------------------------------
----  ----

------------------------------------------------------------------------------------------------------------------------